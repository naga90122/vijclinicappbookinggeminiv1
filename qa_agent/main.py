# qa_agent/main.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv
import os
import httpx # Useful if this agent needs to call other agents

# Load environment variables from .env file
load_dotenv()

app = FastAPI(
    title="QA Agent API",
    description="Confirms proposed actions and attempts auto-correction based on clinic rules and availability."
)

# --- Request/Response Models ---
class QAInput(BaseModel):
    proposed_action: str
    action_details: dict # Details generated by Instruction Developer

class QAResponse(BaseModel):
    status: str # "approved", "rejected", "corrected"
    message: str
    reason: str = None # Reason for rejection or correction
    corrected_details: dict = None # If status is "corrected", provide updated details


# --- Endpoint to Confirm Action ---
@app.post("/confirm_action", response_model=QAResponse)
async def confirm_action(qa_input: QAInput):
    """
    Validates a proposed action against clinic rules and availability.
    Attempts auto-correction if possible.
    """
    print(f"[QA Agent] Confirming action: {qa_input.proposed_action} with details: {qa_input.action_details}")

    # Placeholder for clinic rule validation and availability checks.
    # In a real system, this would:
    # 1. Call DB Agent to check existing appointments/user info.
    # 2. Call Scheduler Agent for real-time availability.
    # 3. Apply business logic for rules (e.g., "appointments must be 30 min long").

    # --- Simple Demo Logic for Validation ---
    if qa_input.proposed_action == "book_appointment":
        # Check if patient name is provided
        if not qa_input.action_details.get("patient_name") or qa_input.action_details.get("patient_name") == "Unknown Patient":
            return QAResponse(
                status="rejected",
                message="Cannot book appointment: Patient name is missing or unknown.",
                reason="missing_patient_name"
            )
        # Simulate a time conflict for a specific doctor
        if qa_input.action_details.get("doctor_name") == "Dr. Smith" and \
           qa_input.action_details.get("appointment_date") == "2025-06-15" and \
           qa_input.action_details.get("appointment_time") == "10:00":
            # Simulate auto-correction: suggest next available time
            corrected_details = qa_input.action_details.copy()
            corrected_details["appointment_time"] = "11:00"
            return QAResponse(
                status="corrected",
                message="Time slot is busy. Auto-corrected to 11:00 AM.",
                reason="time_conflict_auto_corrected",
                corrected_details=corrected_details
            )
        # Simulate a general rule: appointments must have a reason
        if not qa_input.action_details.get("reason"):
             return QAResponse(
                status="rejected",
                message="Cannot book appointment: Reason for visit is required.",
                reason="missing_reason"
            )


    elif qa_input.proposed_action == "register_user":
        # Ensure minimum requirements for registration
        if not all(qa_input.action_details.get(key) for key in ["username", "password", "email"]):
            return QAResponse(
                status="rejected",
                message="Cannot register user: Missing essential details (username, password, or email).",
                reason="missing_registration_details"
            )
        # Simulate password strength check (very basic)
        if len(qa_input.action_details.get("password", "")) < 8:
            return QAResponse(
                status="rejected",
                message="Password is too short. Must be at least 8 characters.",
                reason="weak_password"
            )

    # If no issues or auto-correction needed
    return QAResponse(status="approved", message="Action approved.")


# --- Health Check Endpoint ---
@app.get("/health")
async def health_check():
    """
    Health check endpoint for the agent.
    """
    return {"status": f"{app.title} is healthy"}
